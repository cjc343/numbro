{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/en-US.js","src/formatting.js","src/globalState.js","src/loading.js","src/manipulating.js","src/numbro.js","src/parsing.js","src/unformatting.js","src/validating.js"],"names":["f","exports","module","define","amd","window","global","self","this","numbro","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","languageTag","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","b","currency","symbol","position","currencyDefaults","thousandSeparated","totalLength","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","_format","instance","providedFormat","arguments","undefined","parsing","parseFormat","validating","validateFormat","prefix","postfix","formatNumbro","insertPrefix","insertPostfix","formatCurrency","globalState","formatPercentage","formatByte","formatTime","formatOrdinal","formatNumber","_getDecimalByteUnit","data","bytes","getFormatByteUnits","_value","suffixes","scale","suffix","_getBinaryByteUnit","binary","_getByteUnit","general","value","abs","Math","power","min","pow","max","state","base","baseInfo","_getFormatByteUnits","defaults","currentByteDefaults","currentAbbreviations","spaced","ordinalFn","currentOrdinal","options","Object","assign","defaultOptions","currentOrdinalDefaults","hours","floor","minutes","seconds","round","prefixSymbol","currentPercentageDefaults","currentCurrency","decimalSeparator","space","currentCurrencyDefaults","computeAverage","_ref","forceAverage","_ref$spaceSeparated","_ref$totalLength","abbreviation","mantissaPrecision","optionalSpace","characteristic","toString","split","computeExponential","_ref2","_ref2$characteristicP","characteristicPrecision","_value$toExponential$","toExponential","_value$toExponential$2","_slicedToArray","numberString","exponential","zeroes","result","toFixedLarge","precision","_result$split","_result$split2","exp","_base$split","_base$split2","_base$split2$","substr","toFixed","indexOf","setMantissaPrecision","optionalMantissa","_result$toString$spli","_result$toString$spli2","currentCharacteristic","_result$toString$spli3","match","setCharacteristicPrecision","optionalCharacteristic","_result$toString$spli4","_result$toString$spli5","currentMantissa","replace","missingZeros","indexesOfGroupSpaces","groupSize","counter","unshift","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","slice","forEach","index","insertAbbreviation","insertSign","negative","_ref3","_ref3$state","_ref3$defaults","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","average","forceSign","_data","decimalSuffixes","marker","format","_len","args","Array","_key","apply","concat","getByteUnit","_len2","_key2","getBinaryByteUnit","_len3","_key3","getDecimalByteUnit","_len4","_key4","chooseLanguage","tag","currentLanguageTag","currentLanguageData","languages","enUS","zeroFormat","globalDefaults","currentLanguage","ordinalDefaults","byteDefaults","percentageDefaults","setDefaults","setZeroFormat","string","languageData","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","keys","find","each","_loadLanguagesInNode","tags","console","error","loadLanguagesInNode","multiplier","x","correctionFactor","reduce","prev","next","Infinity","_add","other","isNumbro","factor","acc","_subtract","_multiply","accum","curr","_divide","_set","_difference","clone","add","subtract","multiply","divide","set","difference","Numbro","normalizeInput","input","unformat","isNaN","NaN","version","object","validator","loader","unformatter","formatter","manipulate","prototype","binaryByteUnits","decimalByteUnits","byteUnits","valueOf","language","defaultFormat","defaultCurrencyFormat","validate","parsePrefix","parsePostfix","parseOutput","parseThousandSeparated","parseSpaceSeparated","parseTotalLength","parseCharacteristic","parseMantissa","parseAverage","parseForceAverage","parseOptionalMantissa","parseOptionalCharacteristic","parseNegative","parseForceSign","escapeRegExp","unformatValue","inputString","currencySymbol","stripped","RegExp","allSuffixes","key","possibleOrdinalValue","parseInt","ordinalString","abbreviationKeys","numberOfAbbreviations","_i","matchesTime","segments","unformatTime","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","type","validFormat","_typeof","restrictions","_data$restrictions$i","restriction","message","validValues","JSON","stringify","children","push","_toConsumableArray","mandatory","current","validLanguage","validInput","isFormatValid"],"mappings":"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","file":"numbro.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyDefaults: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst binarySuffixes = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\nconst decimalSuffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\nconst bytes = {\n    general: {scale: 1024, suffixes: decimalSuffixes, marker: \"bd\"},\n    binary: {scale: 1024, suffixes: binarySuffixes, marker: \"b\"},\n    decimal: {scale: 1000, suffixes: decimalSuffixes, marker: \"d\"}\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\":\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        case \"percent\":\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        case \"byte\":\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return {value, suffix};\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let baseInfo = bytes[base];\n\n    let {value, suffix} = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaults()\n    });\n    let abbreviations = state.currentAbbreviations();\n    return `${output}${abbreviations.spaced ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, state.currentOrdinalDefaults(), providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state,\n        defaults: state.currentOrdinalDefaults()\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state,\n        defaults: state.currentPercentageDefaults()\n    });\n    let options = Object.assign({}, defaultOptions, state.currentPercentageDefaults(), providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let options = Object.assign({}, defaultOptions, state.currentCurrencyDefaults(), providedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n\n    if (options.spaceSeparated) {\n        space = \" \";\n    }\n\n    if (currentCurrency.position === \"infix\") {\n        decimalSeparator = space + currentCurrency.symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state,\n        decimalSeparator,\n        defaults: state.currentCurrencyDefaults()\n    });\n\n    if (currentCurrency.position === \"prefix\") {\n        output = currentCurrency.symbol + space + output;\n    }\n\n    if (currentCurrency.position === \"postfix\") {\n        output = output + space + currentCurrency.symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({value, forceAverage, abbreviations, spaceSeparated = false, totalLength = 0}) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if ((abs >= Math.pow(10, 12) && !forceAverage) || (forceAverage === \"trillion\")) {\n        // trillion\n        abbreviation = abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n    } else if ((abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !forceAverage) || (forceAverage === \"billion\")) {\n        // billion\n        abbreviation = abbreviations.billion;\n        value = value / Math.pow(10, 9);\n    } else if ((abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !forceAverage) || (forceAverage === \"million\")) {\n        // million\n        abbreviation = abbreviations.million;\n        value = value / Math.pow(10, 6);\n    } else if ((abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !forceAverage) || (forceAverage === \"thousand\")) {\n        // thousand\n        abbreviation = abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let characteristic = value.toString().split(\".\")[0];\n        mantissaPrecision = Math.max(totalLength - characteristic.length, 0);\n    }\n\n    return {value, abbreviation, mantissaPrecision};\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({value, characteristicPrecision = 0}) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixed(value, precision) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (Math.round(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precions of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - `true` if the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && optionalMantissa) {\n        return currentCharacteristic;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precions of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n\n    if (thousandSeparated) {\n        if (value < 0) {\n            // Remove the minus sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (value < 0) {\n            // Add back the minus sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults()}) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : options.optionalMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n\n    let abbreviation = \"\";\n\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated: spaceSeparated,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * Use first uses the current language default, then fallbacks to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the current ordinal specific formatting defaults.\n * Use first uses the current language ordinal default, then fallbacks to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaults = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalDefaults);\n\n/**\n * Return the current byte specific formatting defaults.\n * Use first uses the current language byte default, then fallbacks to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaults = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteDefaults);\n\n/**\n * Return the current percentage specific formatting defaults.\n * Use first uses the current language percentage default, then fallbacks to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaults = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageDefaults);\n\n/**\n * Return the current currency specific formatting defaults.\n * Use first uses the current language currency default, then fallbacks to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaults = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyDefaults);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n// Todo: add BigNumber support (https://github.com/MikeMcl/bignumber.js/)\n\nfunction multiplier(x) {\n    let parts = x.toString().split(\".\");\n    let mantissa = parts[1];\n\n    if (!mantissa) {\n        return 1;\n    }\n\n    return Math.pow(10, mantissa.length);\n}\n\nfunction correctionFactor(...args) {\n    let smaller = args.reduce((prev, next) => {\n        let mp = multiplier(prev);\n        let mn = multiplier(next);\n        return mp > mn ? prev : next;\n    }, -Infinity);\n\n    return multiplier(smaller);\n}\n\nfunction add(n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    let factor = correctionFactor(n._value, value);\n\n    function callback(acc, number) {\n        return acc + factor * number;\n    }\n\n    n._value = [n._value, value].reduce(callback, 0) / factor;\n    return n;\n}\n\nfunction subtract(n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    let factor = correctionFactor(n._value, value);\n\n    function callback(acc, number) {\n        return acc - factor * number;\n    }\n\n    n._value = [value].reduce(callback, n._value * factor) / factor;\n    return n;\n}\n\nfunction multiply(n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    function callback(accum, curr) {\n        let factor = correctionFactor(accum, curr);\n        let result = accum * factor;\n        result *= curr * factor;\n        result /= factor * factor;\n\n        return result;\n    }\n\n    n._value = [n._value, value].reduce(callback, 1);\n    return n;\n}\n\nfunction divide(n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    function callback(accum, curr) {\n        let factor = correctionFactor(accum, curr);\n        return (accum * factor) / (curr * factor);\n    }\n\n    n._value = [n._value, value].reduce(callback);\n    return n;\n}\n\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.0.0\";\n\n//\n// Constructor\n//\n\nfunction Numbro(number) {\n    this._value = number;\n}\n\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\n\nNumbro.prototype = {\n    clone: function() { return numbro(this._value); },\n    format: function(format = {}) { return formatter.format(this, format); },\n    formatCurrency: function(format = {}) {\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    },\n    formatTime: function(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    },\n    binaryByteUnits: function() { return formatter.getBinaryByteUnit(this);},\n    decimalByteUnits: function() { return formatter.getDecimalByteUnit(this);},\n    byteUnits: function() { return formatter.getByteUnit(this);},\n    difference: function(other) { return manipulate.difference(this, other); },\n    add: function(other) { return manipulate.add(this, other); },\n    subtract: function(other) { return manipulate.subtract(this, other); },\n    multiply: function(other) { return manipulate.multiply(this, other); },\n    divide: function(other) { return manipulate.divide(this, other); },\n    set: function(input) { return manipulate.set(this, normalizeInput(input)); },\n    value: function() { return this._value; },\n    valueOf: function() { return this._value; }\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaults;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n    }\n}\n\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    // Negative\n\n    let match = inputString.match(/\\(([^)]*)\\)/);\n\n    if (match) {\n        return -1 * unformatValue(match[1], delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    if (stripped !== inputString) {\n        return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Thousand separators\n\n    stripped = inputString.replace(new RegExp(escapeRegExp(delimiters.thousands), \"g\"), \"\");\n\n    if (stripped !== inputString) {\n        return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Decimal\n\n    stripped = inputString.replace(delimiters.decimal, \".\");\n\n    if (stripped !== inputString) {\n        return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(suffix.key, \"\");\n\n        if (stripped !== inputString) {\n            return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseInt(inputString, 10);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    stripped = inputString.replace(ordinalString, \"\");\n\n    if (stripped !== inputString) {\n        return unformatValue(stripped, delimiters, currencySymbol, format);\n    }\n\n    // Average\n    let abbreviationKeys = Object.keys(abbreviations);\n    let numberOfAbbreviations = abbreviationKeys.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let key = abbreviationKeys[i];\n\n        stripped = inputString.replace(abbreviations[key], \"\");\n\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(1000, 1);\n                    break;\n                case \"million\":\n                    factor = Math.pow(1000, 2);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(1000, 3);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(1000, 4);\n                    break;\n            }\n            return unformatValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalDefaults: \"format\",\n    byteDefaults: \"format\",\n    percentageDefaults: \"format\",\n    currencyDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param input\n * @param format\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return !!value;\n}\n\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\nfunction validateLanguage(data) {\n    return validateSpec(data, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n"]}